{"name":"Vagrant-azure","tagline":"Use Vagrant to manage Windows Azure virtual machine instances","body":"#Vagrant Windows Azure Provider\r\n\r\n<span class=\"badges\">\r\n[![Build Status](https://secure.travis-ci.org/10thmagnitude/vagrant-azure.png)](http://travis-ci.org/10thmagnitude/vagrant-azure) [![Code Climate](https://codeclimate.com/repos/528a8e3ff3ea0041270b7cee/badges/4e4e11d58022df01ca23/gpa.png)](https://codeclimate.com/repos/528a8e3ff3ea0041270b7cee/feed)\r\n[![Coverage Status](https://coveralls.io/repos/10thmagnitude/vagrant-azure/badge.png)](https://coveralls.io/r/10thmagnitude/vagrant-azure)\r\n</span>\r\n\r\nThis is a [Vagrant](http://www.vagrantup.com) 1.2+ plugin that adds a [Windows Azure](http://www.windowsazure.com/)\r\nprovider to Vagrant, allowing Vagrant to control and provision machines in\r\nWindows Azure.\r\n\r\n**NOTE:** This plugin requires Vagrant 1.2+,\r\n\r\n## Features\r\n\r\n* Boot up virtual machines in Azure (TODO)\r\n* SSH or WinRM into the instances (TODO)\r\n* Provision the instances with the built-in providers (shell, Puppet, Chef) (TODO)\r\n\r\n## Usage\r\n\r\nInstall using standard Vagrant 1.1+ plugin installation methods. After\r\ninstalling, `vagrant up` and specify the `azure` provider. An example is\r\nshown below.\r\n\r\n```\r\n$ vagrant plugin install vagrant-azure\r\n...\r\n$ vagrant up --provider=azure\r\n...\r\n```\r\nThis assumes you have an Azure-compatible box file for use with Vagrant.\r\n\r\n## Quick Start\r\n\r\nAfter installing the plugin (instructions above), the quickest way to get\r\nstarted is to actually use a dummy AWS box and specify all the details\r\nmanually within a `config.vm.provider` block. So first, add the dummy\r\nbox using any name you want:\r\n\r\n```\r\n$ vagrant box add dummy URL REDACTED\r\n...\r\n```\r\n\r\nAnd then make a Vagrantfile that looks like the following, filling in\r\nyour information where necessary.\r\n\r\n```\r\nVagrant.configure(\"2\") do |config|\r\n  config.vm.box = \"dummy\"\r\n\r\n  config.vm.provider :azure do |azure, override|\r\n    azure.publish_settings_file= \"PATH TO YOUR PUBLISH SETTINGS\"\r\n    azure.subscription_id = \"YOUR SUBSCRIPTION ID\"\r\n    azure.source_vhd = \"chef-tpl-2k8r2\"\r\n\r\n  end\r\nend\r\n```\r\n\r\nAnd then run `vagrant up --provider=azure`.\r\n\r\nThis will start an Ubuntu 12.04 instance in the REDACTED region within\r\nyour account. And assuming your SSH/WinRM information was filled in properly\r\nwithin your Vagrantfile, SSH/WinRM and provisioning will work as well.\r\n\r\n## Box Format\r\n\r\nEvery provider in Vagrant must introduce a custom box format. This\r\nprovider introduces `azure` boxes. You can view an example box in\r\nthe [example_box/ directory](https://github.com/mitchellh/vagrant-aws/tree/master/example_box).\r\nThat directory also contains instructions on how to build a box.\r\n\r\nThe box format is basically just the required `metadata.json` file\r\nalong with a `Vagrantfile` that does default settings for the\r\nprovider-specific configuration for this provider.\r\n\r\n## Configuration\r\n\r\nThis provider exposes quite a few provider-specific configuration options:\r\n\r\n(more to come)\r\n\r\n* `publish_settings_file` - Path to the publish settings to use\r\n* `subscription_id` - Which subscription to use in the account\r\n* `source_vhd` - The name of the image to start with\r\n\r\nThese can be set like typical provider-specific configuration:\r\n\r\n```ruby\r\nVagrant.configure(\"2\") do |config|\r\n  # ... other stuff\r\n\r\n  config.vm.provider :azure do |azure|\r\n    azure.publish_settings_file = \"c:\\users\\mstratton\\mstratton.publishsettingsfile\"\r\n    azure.ssubscription_id = \"cc0e62b9-6a31-XXXX-a580-907c8297557b\"\r\n  end\r\nend\r\n```\r\n\r\n## Networks\r\n\r\nNetworking features in the form of `config.vm.network` are not\r\nsupported with `vagrant-azure`, currently. If any of these are\r\nspecified, Vagrant will emit a warning, but will otherwise boot\r\nthe Windows Azure machine.\r\n\r\n## Synced Folders\r\n\r\nThere is currently no support for synced folders. TODO!\r\n\r\n## Contributing\r\n\r\nTo work on the `vagrant-azure` plugin, clone this repository out, and use\r\n[Bundler](http://gembundler.com) to get the dependencies:\r\n\r\n```\r\n$ bundle\r\n```\r\n\r\nOnce you have the dependencies, verify the unit tests pass with `rake`:\r\n\r\n```\r\n$ bundle exec rake\r\n```\r\n\r\nIf those pass, you're ready to start developing the plugin. You can test\r\nthe plugin without installing it into your Vagrant environment by just\r\ncreating a `Vagrantfile` in the top level of this directory (it is gitignored)\r\nand add the following line to your `Vagrantfile` \r\n```ruby\r\nVagrant.require_plugin \"vagrant-aws\"\r\n```\r\nUse bundler to execute Vagrant:\r\n```\r\n$ bundle exec vagrant up --provider=aws\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}